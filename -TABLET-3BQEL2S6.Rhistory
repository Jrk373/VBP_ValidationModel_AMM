# Remove the first row of data that hheaders
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned[-1,]
# 5/1/23 - Create SubMeasureID
VBPQR_AllAPsCombined_Cleaned$`SubMeasure ID` <- substr(VBPQR_AllAPsCombined_Cleaned$Measure, 1, 3)
# Create a Provider Shortname
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned |>
mutate(Provider_Shortname = ifelse(`Health Home TIN & Name` == "94-2880847 - COMMUNITY BRIDGES", "CBI",
ifelse(`Health Home TIN & Name` == "86-0215065 - CHANGE POINT INTEGRATED HEALTH", "CPIH",
ifelse(`Health Home TIN & Name` == "86-0250938 - LITTLE COLORADO BEHAVIORAL HEALTH", "LCBHC",
ifelse(`Health Home TIN & Name` == "86-0214457 - MOHAVE MENTAL HEALTH", "MMHC",
ifelse(`Health Home TIN & Name` == "86-0206928 - POLARA HEALTH", "PH",
ifelse(`Health Home TIN & Name` == "86-0290033 - SOUTHWEST BEHAVIORAL HEALTH", "SBHS",
ifelse(`Health Home TIN & Name` == "86-0207499 - SPECTRUM HEALTH GROUP", "SHG",
ifelse(`Health Home TIN & Name` == "86-0223720 - THE GUIDANCE CENTER", "TGC", NA
))))))))) |>
drop_na(Provider_Shortname)
VBPQR_AllAPsCombined_Cleaned2 <- VBPQR_AllAPsCombined_Cleaned
# date of file = date of VBP QR report
# write.csv(VBPQR_AllAPsCombined_Cleaned, "./data/output/VBPMeasurementValidation_AMM/VBPQR_AllAPsCombined_Cleaned_complete_2023-04-27.csv")
# Isolate SubMeasure ID AMM for the validation
VBPQR_AllAPsCombined_AMM <- VBPQR_AllAPsCombined_Cleaned |>   filter(`SubMeasure ID` == "AMM")
# write.csv(VBPQR_AllAPsCombined_AMM, "./data/output/VBPMeasurementValidation/VBPQR_AllAPsCombined_AMM.csv")
# Isolate member ID for the validation
VBPQR_AllAPsCombined_AMMMemberID <- VBPQR_AllAPsCombined_AMM |>
select(`Member ID`)
# write.csv(VBPQR_AllAPsCombined_AMM, "./data/output/VBPMeasurementValidation_AMM/VBPQR_AllAPsCombined_AMMMemberID.csv")
# create a duplicate at this phase to be used in later evaluation
VBPQR_AllAPsCombined_Cleaned2 <- VBPQR_AllAPsCombined_Cleaned |>
filter(`SubMeasure ID` == "FUH")
# write.csv(VBPQR_AllAPsCombined_Cleaned2, "./data/output/VBPMeasurementValidation/VBPQR_AllAPsCombined_Cleaned2.csv")
# Isolate member ID for the validation
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned |>
filter(`SubMeasure ID` == "FUH") |>
select(`Member ID`)
# write.csv(VBPQR_AllAPsCombined_Cleaned, "./data/output/VBPMeasurementValidation/VBP_Validation.csv")
#| label: Setup
#| include: true
#| echo: true
#| warning: false
#| error: false
## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
# Create table for inline code
InLineCode <- data.frame(
ReportDate = "04-27-2023",
MeasurementYear = "01-01-2023 to 12-31-2023",
ClaimsAdjudicatedThrough = "02-28-2023",
HEDISVersion = "My 2023",
IntakePeriod = "05-01-2022 to 04-30-2023",
NegativeMedicationHistory = "01-16-222 to 01/15/2023",
IPSDstart_date = as.Date("2022-05-01"),
IPSDend_date = as.Date("2023-04-30"),
NMHstart_date = as.Date("2022-01-16"),
NMHend_date = as.Date("2023-01-15")
)
#| label: Load Data
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the unaltered VBP report, "Detail" sheet, as received from HCA
# 5/1/23 sheet = "Detail" was change by HCA to sheet = "Roster"
vbp_cbi   <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_94-2880847_Community_Bridges_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_cbi <- vbp_cbi [,-1]
colnames(vbp_cbi) <- c("BCBSAZ Health Choice" ,"...2", "...3", "...4", "...5", "...6", "...7", "...8", "...9")
vbp_cpih  <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0215065_Change_Point_Integrated_Health_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_lcbhc <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0250938_Little_Colorado_Behavioral_Health_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_mmhc  <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0214457_Mohave_Mental_Health_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_ph    <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0206928_Polara_Health_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_sbhs  <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0290033_Southwest_Behavioral_Health_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_shg   <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0207499_Spectrum_Health_Group_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
vbp_tgc   <-  read_xlsx("./data/VBPReports/Quality/vbpbhh_report_2023-04-27_86-0223720_The_Guidance_Center_HCA_BHH_VBP_Quality_Roster.xlsx", sheet = "Roster")
## if any of the tables pick up rogue columns, use:
#vbp_cbi <- vbp_cbi [,-1]
#colnames(vbp_cbi) <- c("BCBSAZ Health Choice" ,"...2", "...3", "...4", "...5", "...6", "...7", "...8", "...9")
# Bind the Roster sheet from all providers into one table
DataRaw_VBPQR_AllAPsCombined <- rbind(
vbp_cbi,
vbp_cpih,
vbp_lcbhc,
vbp_mmhc,
vbp_ph,
vbp_sbhs,
vbp_shg,
vbp_tgc
)
# date of file = date of VBP QR report
# write.csv(DataRaw_VBPQR_AllAPsCombined, "./data/output/VBPMeasurementValidation_AMM/2023-04-27_DataRaw_VBPQR_AllAPsCombined.csv")
#| label: CreateVBPQRDataSet
#| include: true
#| echo: true
#| warning: false
#| error: false
# create a safe copy of the original data
VBPQR_AllAPsCombined_Cleaned <- DataRaw_VBPQR_AllAPsCombined
# Filter out superfluous rows of nonsense data
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned |>
filter(`...2` != "NA")
# Set column names to headers, which get imported on row 1 #5/2/23 - updated from "6"
colnames(VBPQR_AllAPsCombined_Cleaned) <- VBPQR_AllAPsCombined_Cleaned [1,]
# Remove the first row of data that hheaders
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned[-1,]
# 5/1/23 - Create SubMeasureID
VBPQR_AllAPsCombined_Cleaned$`SubMeasure ID` <- substr(VBPQR_AllAPsCombined_Cleaned$Measure, 1, 3)
# Create a Provider Shortname
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned |>
mutate(Provider_Shortname = ifelse(`Health Home TIN & Name` == "94-2880847 - COMMUNITY BRIDGES", "CBI",
ifelse(`Health Home TIN & Name` == "86-0215065 - CHANGE POINT INTEGRATED HEALTH", "CPIH",
ifelse(`Health Home TIN & Name` == "86-0250938 - LITTLE COLORADO BEHAVIORAL HEALTH", "LCBHC",
ifelse(`Health Home TIN & Name` == "86-0214457 - MOHAVE MENTAL HEALTH", "MMHC",
ifelse(`Health Home TIN & Name` == "86-0206928 - POLARA HEALTH", "PH",
ifelse(`Health Home TIN & Name` == "86-0290033 - SOUTHWEST BEHAVIORAL HEALTH", "SBHS",
ifelse(`Health Home TIN & Name` == "86-0207499 - SPECTRUM HEALTH GROUP", "SHG",
ifelse(`Health Home TIN & Name` == "86-0223720 - THE GUIDANCE CENTER", "TGC", NA
))))))))) |>
drop_na(Provider_Shortname)
VBPQR_AllAPsCombined_Cleaned2 <- VBPQR_AllAPsCombined_Cleaned
# date of file = date of VBP QR report
# write.csv(VBPQR_AllAPsCombined_Cleaned, "./data/output/VBPMeasurementValidation_AMM/VBPQR_AllAPsCombined_Cleaned_complete_2023-04-27.csv")
# Isolate SubMeasure ID AMM for the validation
VBPQR_AllAPsCombined_AMM <- VBPQR_AllAPsCombined_Cleaned |>   filter(`SubMeasure ID` == "AMM")
# write.csv(VBPQR_AllAPsCombined_AMM, "./data/output/VBPMeasurementValidation/VBPQR_AllAPsCombined_AMM.csv")
# Isolate member ID for the validation
VBPQR_AllAPsCombined_AMMMemberID <- VBPQR_AllAPsCombined_AMM |>
select(`Member ID`)
# write.csv(VBPQR_AllAPsCombined_AMM, "./data/output/VBPMeasurementValidation_AMM/VBPQR_AllAPsCombined_AMMMemberID.csv")
# create a duplicate at this phase to be used in later evaluation
VBPQR_AllAPsCombined_Cleaned2 <- VBPQR_AllAPsCombined_Cleaned |>
filter(`SubMeasure ID` == "FUH")
# write.csv(VBPQR_AllAPsCombined_Cleaned2, "./data/output/VBPMeasurementValidation/VBPQR_AllAPsCombined_Cleaned2.csv")
# Isolate member ID for the validation
VBPQR_AllAPsCombined_Cleaned <- VBPQR_AllAPsCombined_Cleaned |>
filter(`SubMeasure ID` == "FUH") |>
select(`Member ID`)
# write.csv(VBPQR_AllAPsCombined_Cleaned, "./data/output/VBPMeasurementValidation/VBP_Validation.csv")
#| label: CreateRxIdentifierCrosswalk
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Covert NDC to GPI
#import the My2023 Medications to Code data set
Med_To_NDC <- read.csv("./data/My2023MedicationToCode.csv")
Med_To_NDC_AMM <- Med_To_NDC |>
filter(Medication.List.Name == "Antidepressant Medications") |>
select(
Medication.List.Name,
Code,
Generic.Product.Name
)
colnames(Med_To_NDC_AMM)[colnames(Med_To_NDC_AMM) == "Code"] <- "NDC_NationalDrugCode"
colnames(Med_To_NDC_AMM)[colnames(Med_To_NDC_AMM) == "Medication.List.Name"] <- "MedicationList"
colnames(Med_To_NDC_AMM)[colnames(Med_To_NDC_AMM) == "Generic.Product.Name"] <- "GenericProductName"
# Import AHCCCS Preferred drug list
NDC_To_GPI <- read.csv("./data/AHCCCS_PreferredDrugListChangesFor_08012019.csv")
colnames(NDC_To_GPI)[colnames(NDC_To_GPI) == "Therapeutic.Class...Market.Basket"] <- "TherepeuticClass"
colnames(NDC_To_GPI)[colnames(NDC_To_GPI) == "National.Drug.Code..NDC..MediSpan"] <- "NDC_NationalDrugCode"
colnames(NDC_To_GPI)[colnames(NDC_To_GPI) == "MediSpan.Generic.Product.Indicator..GPI."] <- "GPI_GenericProductIdentifier"
NDC_To_GPI_AMM <- NDC_To_GPI |>
filter(c(TherepeuticClass == "ANTIDEPRESSANTS, OTHER" | TherepeuticClass ==  "ANTIDEPRESSANTS, SSRIs")) |>
select(NDC_NationalDrugCode,
GPI_GenericProductIdentifier,
TherepeuticClass)
# merge then filter for only AHCCCS preferred medications
# So these are all of the ones from NCQA that AHCCCS has on thier list. And now we have our crosswalk to address claims.
My2023NDCtoGPICrosswalk <- merge(
x = Med_To_NDC_AMM,
y = NDC_To_GPI_AMM,
by = "NDC_NationalDrugCode",
all.y = TRUE
) |>
select(
MedicationList,
TherepeuticClass,
NDC_NationalDrugCode,
GPI_GenericProductIdentifier,
GenericProductName
) |>
na.omit()
# write.csv(My2023NDCtoGPICrosswalk, "./data/output/My2023NDCtoGPICrosswalk.csv")
concatenated_values_GPI <- paste0("'",    My2023NDCtoGPICrosswalk$GPI_GenericProductIdentifier, "'", collapse = ", ")
#| label: NegativeMedicationTestIPSD
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2027-05-31.csv")
#| label: NegativeMedicationTestIPSD
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2027-05-31.csv")
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2027-05-31.csv")
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2023-05-31.csv")
# Convert numeric variable to date
PBMClaims$dtefilled <- as.Date(as.character(PBMClaims$dtefilled), format = "%Y%m%d")
# Convert character variable to date
PBMClaims$AsOfDate <- as.Date(PBMClaims$AsOfDate, format = "%m/%d/%Y")
write.csv(PBMClaims, "./data/output/PBMClaims.csv")
write.csv(PBMClaims, "./data/output/PBMClaims.csv")
PBMClaims_NMHTest <- PBMClaims
PBMClaims_NMHTest <- PBMClaims
# Convert the 'dtefilled' column to Date type if it's not already in the correct format
PBMClaims_NMHTest$dtefilled <- as.Date(PBMClaims_NMHTest$dtefilled)
# Define the start and end dates for IPSDTest
ip_start_date <- as.Date("2022-05-01")
ip_end_date <- as.Date("2023-04-30")
# Create the IPSDTest column based on the date conditions
# A result of "TRUE" indicates a positive IPSD
PBMClaims_NMHTest$IPSDTest <- ifelse(
PBMClaims_NMHTest$dtefilled >= ip_start_date
& PBMClaims_NMHTest$dtefilled <= ip_end_date, "TRUE", "FALSE")
View(PBMClaims_NMHTest)
# Initialize NMHTestResult column with empty values
PBMClaims_NMHTest$NMHTestResult <- ""
View(PBMClaims_NMHTest)
# Initialize NMHTestResult column with empty values
PBMClaims_NMHTest$NMHTestResult <- NULL
View(PBMClaims_NMHTest)
#| label: NegativeMedicationTestIPSD
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2023-05-31.csv")
# Convert numeric variable to date
PBMClaims$dtefilled <- as.Date(as.character(PBMClaims$dtefilled), format = "%Y%m%d")
# Convert character variable to date
PBMClaims$AsOfDate <- as.Date(PBMClaims$AsOfDate, format = "%m/%d/%Y")
write.csv(PBMClaims, "./data/output/PBMClaims.csv")
PBMClaims_NMHTest <- PBMClaims
# Assuming you have a data frame named 'PBMClaims' with columns 'dtefilled', 'GpiNumber', and 'clientID'
# Convert the 'dtefilled' column to Date type if it's not already in the correct format
PBMClaims_NMHTest$dtefilled <- as.Date(PBMClaims_NMHTest$dtefilled)
# Define the start and end dates for IPSDTest
ip_start_date <- as.Date("2022-05-01")
ip_end_date <- as.Date("2023-04-30")
# Create the IPSDTest column based on the date conditions
# A result of "TRUE" indicates a positive IPSD
PBMClaims_NMHTest$IPSDTest <- ifelse(
PBMClaims_NMHTest$dtefilled >= ip_start_date
& PBMClaims_NMHTest$dtefilled <= ip_end_date, "TRUE", "FALSE")
# Initialize NMHTestResult column with empty values
PBMClaims_NMHTest$NMHTestResult <- ""
# Loop through each row of the data frame
for (i in 1:nrow(PBMClaims_NMHTest)) {
# Get the current ClientID, GpiNumber, and IPSDTest date
current_client <- PBMClaims_NMHTest$clientID[i]
current_gpi <- PBMClaims_NMHTest$GpiNumber[i]
ipsd_test_date <- PBMClaims_NMHTest$dtefilled[i]
# Find any matching observation with the same ClientID, GpiNumber, and a date less than 105 days before the IPSDTest date
matching_observation <- PBMClaims_NMHTest$clientID[
PBMClaims_NMHTest$clientID == current_client
& PBMClaims_NMHTest$GpiNumber == current_gpi
## This is the problematic bit right here. Less than or greater than?
& PBMClaims_NMHTest$dtefilled < ipsd_test_date - 105]
# If there is no matching observation, update the NMHTestResult value for the current row
if (length(matching_observation) != 0) {
PBMClaims_NMHTest$NMHTestResult[i] <- "NMH"
}
}
# write.csv(PBMClaims_NMHTest, "./data/output/NMHTest.csv")
View(PBMClaims_NMHTest)
write.csv(PBMClaims_NMHTest, "./data/output/NMHTest.csv")
write.csv(PBMClaims_NMHTest, "./data/output/PBMClaims_NMHTest.csv")
write.csv(PBMClaims_NMHTest, "./data/output/PBMClaims_NMHTest_copy.csv")
# Create table for inline code
InLineCode <- data.frame(
ReportDate = "04-27-2023",
MeasurementYear = "01-01-2023 to 12-31-2023",
ClaimsAdjudicatedThrough = "02-28-2023",
HEDISVersion = "My 2023",
IntakePeriod = "05-01-2022 to 04-30-2023",
NegativeMedicationHistory = "01-16-222 to 01/15/2023",
IPSDstart_date = as.Date("2022-05-01"),
IPSDend_date = as.Date("2023-04-30"),
NMHstart_date = as.Date("2022-01-16"),
NMHend_date = as.Date("2023-01-15"),
DeppressiveDisorder = "03/02/2022 to 10/30/2023"
)
# Import the Value Set List
ValueSetListMy2023 <- read.csv("./data/ValueSetListMy2023.csv")
View(ValueSetListMy2023)
# Create a list of the diagnosis codes
MDDxList <- ValueSetListMy2023$Code
# Concatenate for adding to sql
concatenated_values_MDDx <- paste0("'",    ValueSetListMy2023$Code, "'", collapse = ", ")
concatenated_values_MDDx
# Concatenate for adding to sql
concatenated_values_MDDx <- paste0("(",    ValueSetListMy2023$Code, ")", collapse = ", ")
concatenated_values_MDDx
#| label: Setup
#| include: true
#| echo: true
#| warning: false
#| error: false
## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
# Create table for inline code
InLineCode <- data.frame(
ReportDate = "04-27-2023",
MeasurementYear = "01-01-2023 to 12-31-2023",
ClaimsAdjudicatedThrough = "02-28-2023",
HEDISVersion = "My 2023",
IntakePeriod = "05-01-2022 to 04-30-2023",
NegativeMedicationHistory = "01-16-222 to 01/15/2023",
IPSDstart_date = as.Date("2022-05-01"),
IPSDend_date = as.Date("2023-04-30"),
NMHstart_date = as.Date("2022-01-16"),
NMHend_date = as.Date("2023-01-15"),
DeppressiveDisorder = "03/02/2022 to 10/30/2023"
)
#| label: MajDepressiveDxTest
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the Value Set List
ValueSetListMy2023 <- read.csv("./data/ValueSetListMy2023.csv")
# Create a list of the diagnosis codes
MDDxList <- ValueSetListMy2023$Code
# Concatenate for adding to sql
concatenated_values_MDDx <- paste0("(",    ValueSetListMy2023$Code, ")", collapse = ", ")
# Create table for inline code
InLineCode <- data.frame(
ReportDate = "04-27-2023",
MeasurementYear = "01-01-2023 to 12-31-2023",
ClaimsAdjudicatedThrough = "02-28-2023",
HEDISVersion = "My 2023",
IntakePeriod = "05-01-2022 to 04-30-2023",
NegativeMedicationHistory = "01-16-222 to 01/15/2023",
IPSDstart_date = as.Date("2022-05-01"),
IPSDend_date = as.Date("2023-04-30"),
NMHstart_date = as.Date("2022-01-16"),
NMHend_date = as.Date("2023-01-15"),
DeppressiveDisorder = "03/02/2022 to 10/30/2023"
)
#| label: Setup
#| include: true
#| echo: true
#| warning: false
#| error: false
## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
library(utils)
# Create table for inline code
InLineCode <- data.frame(
ReportDate = "04-27-2023",
MeasurementYear = "01-01-2023 to 12-31-2023",
ClaimsAdjudicatedThrough = "02-28-2023",
HEDISVersion = "My 2023",
IntakePeriod = "05-01-2022 to 04-30-2023",
NegativeMedicationHistory = "01-16-222 to 01/15/2023",
IPSDstart_date = as.Date("2022-05-01"),
IPSDend_date = as.Date("2023-04-30"),
NMHstart_date = as.Date("2022-01-16"),
NMHend_date = as.Date("2023-01-15"),
DeppressiveDisorder = "03/02/2022 to 10/30/2023"
)
test <- read_xlsx("./data/MDDxClaims_20230602.xlsx", sheet = "MDDxClaims_20230602")
test <- read_xlsx("./data/MDDxClaims_20230602.xlsx", sheet = "MDDxClaims_20230602")
test <- read_xlsx("./data/MDDxClaims_20230602.xlsx", sheet = "MDDxClaims_20230602")
test <- read_csv("./data/MDDxClaims_20230602.csv")
View(test)
test <- read_csv("./data/MDDxClaims_20230602.csv")
View(test)
test <- read_csv("./data/MDDxClaims_20230602.csv")
View(test)
test <- read_csv("./data/MDDxClaims_20230602.csv")
View(test)
MDDxClaims <- read_csv("./data/MDDxClaims_20230602.csv")
#| label: NegativeMedicationTestIPSD
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
# Import the raw claims
PBMClaims <- read.csv("./data/DataRaw_PBMClaims_2023-05-31.csv")
# Convert numeric variable to date
PBMClaims$dtefilled <- as.Date(as.character(PBMClaims$dtefilled), format = "%Y%m%d")
# Convert character variable to date
PBMClaims$AsOfDate <- as.Date(PBMClaims$AsOfDate, format = "%m/%d/%Y")
write.csv(PBMClaims, "./data/output/PBMClaims.csv")
PBMClaims_NMHTest <- PBMClaims
# Assuming you have a data frame named 'PBMClaims' with columns 'dtefilled', 'GpiNumber', and 'clientID'
# Convert the 'dtefilled' column to Date type if it's not already in the correct format
PBMClaims_NMHTest$dtefilled <- as.Date(PBMClaims_NMHTest$dtefilled)
# Define the start and end dates for IPSDTest
ip_start_date <- as.Date("2022-05-01")
ip_end_date <- as.Date("2023-04-30")
# Create the IPSDTest column based on the date conditions
# A result of "TRUE" indicates a positive IPSD
PBMClaims_NMHTest$IPSDTest <- ifelse(
PBMClaims_NMHTest$dtefilled >= ip_start_date
& PBMClaims_NMHTest$dtefilled <= ip_end_date, "TRUE", "FALSE")
# Initialize NMHTestResult column with empty values
PBMClaims_NMHTest$NMHTestResult <- ""
# Loop through each row of the data frame
for (i in 1:nrow(PBMClaims_NMHTest)) {
# Get the current ClientID, GpiNumber, and IPSDTest date
current_client <- PBMClaims_NMHTest$clientID[i]
current_gpi <- PBMClaims_NMHTest$GpiNumber[i]
ipsd_test_date <- PBMClaims_NMHTest$dtefilled[i]
# Find any matching observation with the same ClientID, GpiNumber, and a date less than 105 days before the IPSDTest date
matching_observation <- PBMClaims_NMHTest$clientID[
PBMClaims_NMHTest$clientID == current_client
& PBMClaims_NMHTest$GpiNumber == current_gpi
## This is the problematic bit right here. Less than or greater than?
& PBMClaims_NMHTest$dtefilled < ipsd_test_date - 105]
# If there is no matching observation, update the NMHTestResult value for the current row
if (length(matching_observation) != 0) {
PBMClaims_NMHTest$NMHTestResult[i] <- "NMH"
}
}
write.csv(PBMClaims_NMHTest, "./data/output/PBMClaims_NMHTest_copy.csv")
View(PBMClaims_NMHTest)
View(MDDxClaims)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryID" = "primaryID")) %>%
mutate(
MDDxTest = if_else(
(begdate < dtefilled - 60) | (begdate > dtefilled + 60),
"MDDx", NA_character_
)
)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("primaryID" = "PrimaryID")) %>%
mutate(
MDDxTest = if_else(
(begdate < dtefilled - 60) | (begdate > dtefilled + 60),
"MDDx", NA_character_
)
)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryID" = "primaryID")) %>%
mutate(
MDDxTest = if_else(
(begdate < dtefilled - 60) | (begdate > dtefilled + 60),
"MDDx", NA_character_
)
)
MDDxClaims <- MDDxClaims %>%
rename(PrimaryId = primaryID)
View(MDDxClaims)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryID" = "primaryID")) %>%
mutate(
MDDxTest = if_else(
(begdate < dtefilled - 60) | (begdate > dtefilled + 60),
"MDDx", NA_character_
)
)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryId" = "PrimaryId")) %>%
mutate(
MDDxTest = if_else(
(begdate < dtefilled - 60) | (begdate > dtefilled + 60),
"MDDx", NA_character_
)
)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryId" = "PrimaryId")) %>%
mutate(
MDDxTest = if_else(
(begDate < dtefilled - 60) | (begDate > dtefilled + 60),
"MDDx", NA_character_
)
)
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryId" = "PrimaryId")) %>%
mutate(
MDDxTest = if_else(
(begDate < dtefilled - 60) | (begDate > dtefilled + 60),
"MDDx", NA_character_
)
)
# Convert date columns to proper format
PBMClaims_NMHTest$dtefilled <- as.Date(PBMClaims_NMHTest$dtefilled, format = "%Y-%m-%d")
MDDxClaims$begDate <- as.Date(MDDxClaims$begDate, format = "%Y-%m-%d")
result <- PBMClaims_NMHTest %>%
left_join(MDDxClaims, by = c("PrimaryId")) %>%
mutate(
MDDxTest = if_else(
(begDate < dtefilled - 60) | (begDate > dtefilled + 60),
"MDDx", NA_character_
)
)
View(result)
