---
title: "Validation Model, NCQA My HEDIS 2023"
subtitle: "Antidepressant Medication Management"
author: 
  name: "John Ryan Kivela, MA and Victoria Tewa, LPC"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

# Set Up

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
library(utils)
library(lubridate)
library(RODBC)
library(DBI)
library(odbc)
library(dbplyr)
library(data.table)

# Create table for inline code
InLineCode <- data.frame(
  ReportDate = "04-27-2023",
  MeasurementYear = "01-01-2023 to 12-31-2023",
  ClaimsAdjudicatedThrough = "02-28-2023",
  HEDISVersion = "My 2023",
  IntakePeriod = "05-01-2022 to 04-30-2023",
  NegativeMedicationHistory = "01-16-222 to 01-15-2023",
    IPSDstart_date = as.Date("2022-05-01"),
    IPSDend_date = as.Date("2023-04-30"),
    NMHstart_date = as.Date("2022-01-16"),
    NMHend_date = as.Date("2023-01-15")
)

# Define custom inline code hook for comma separators
comma_separator_hook <- function(x) {
  formatted <- format(x, big.mark = ",")
  knitr::asis_output(formatted)
}

# Set the inline code hook globally
knitr::knit_hooks$set(inline = comma_separator_hook)

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))
```

# Pre-Load Data

```{r}
# Enrollments
Enrollments_AllACC <- read.csv("./data/output/Enrollments_AllACC.csv")
GM_ALLAZ_Enrollments <- read.csv("./data/output/GM_AllAZ_Enrollments.csv")
GM_ALLAZ_Addresses <- read.csv("./data/output/GM_AllAZ_Addresses.csv")
GM_PrimaryAssignedClinic <- read.csv("./data/output/GM_PrimaryAssignedClinic.csv")
GM_HealthHomes <- read.csv("./data/output/GM_HealthHomes.csv")

# Demographics
Clients_Demographics_AllACC <- read.csv("./data/output/Clients.csv")
GM_DUGLess <- read.csv("./data/output/DUGLess.csv")

# Claims
Claims_AllHCA <- read.csv("./data/output/Claims_AllHCA.csv")

# Value Sets
MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", sheet = "Value Sets to Codes")

MyHEDIS2023_MedicationDirectory <- read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", sheet = "Medication Lists to Codes")

# Summary
AllTheVariables <- read.csv("./data/AllTheVariables.csv")

```

# Step 1

Determine the IPSD. Identify the date of the earliest dispensing event for an antidepressant medication (Antidepressant Medications List) during the intake period.

```{r}
# Identify Alliance Membership

#Merge Enrollment files

AllianceEnrolledMembers_Merge <-
  merge(x = Enrollments_AllACC,
        y = Clients_Demographics_AllACC,
        by = "PrimaryId",
        all.x = TRUE)
  
AllianceEnrolledMembers_Merge <-  
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate,
    DisenrollmentDate,
    DOB,
    DOD
  )

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Enrollments,
        by = "PrimaryId",
        all.x = TRUE)

AllianceEnrolledMembers_Merge <-
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate.x,
    DisenrollmentDate.x,
    DOB,
    DOD,
    BHHShortName
  )

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Addresses,
        by = "PrimaryId",
        all.x = TRUE)

AllianceEnrolledMembers_Merge <- 
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate.x,
    DisenrollmentDate.x,
    DOB,
    DOD,
    BHHShortName,
    ResCountyName
  )

# Trim extra spaces at end of rescountyname

AllianceEnrolledMembers_Merge$ResCountyName <-
  trimws(AllianceEnrolledMembers_Merge$ResCountyName)

# Filter for The Alliance Providers and the Northern Counties

AllianceEnrolledMembers <-
  AllianceEnrolledMembers_Merge |> 
  filter(BHHShortName %in% Provider_ShortName)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(ResCountyName %in% NAZ_Counties)

# Filter out dead people (no offense intended)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(is.na(DOD))

## Write to CSV
# write.csv(AllianceEnrolledMembers, "./data/output/AllianceEnrolledMembers.csv")

```

```{r}

# Antidepressant Medication List

# Filter the MyHEDIS2023_MedicationDirectory for "Antidepressant Medications"
AntidepressantMedications <- MyHEDIS2023_MedicationDirectory |> 
  filter(`Medication List Name` == "Antidepressant Medications")

# Extract the associated code values as a vector
AntidepressantMedicationList <- AntidepressantMedications$Code
```

```{r}
# Index Prescription Start Date

# Filter the Claims for only antidepressant medications
IPSD <-
  Claims_AllHCA |> 
  filter(MedicationNDC %in% AntidepressantMedicationList)

# Filter IPSD for the intake period 5/1/22 - 4/30/23

# Specify the start and end dates
IPSD_start_date <- as.Date("2022-05-01")
IPSD_end_date <- as.Date("2023-04-30")

IPSD <- 
  IPSD |> 
  filter(BegDate >= IPSD_start_date, 
         BegDate <= IPSD_end_date)

Step1_IPSD <-
  IPSD |> 
  filter(PrimaryID %in% AllianceEnrolledMembers$PrimaryId) |> 
  select(
    PrimaryID,
    BegDate
  ) |> 
  rename("IPSD" = BegDate)

## Write to CSV
# write.csv(IPSD, "./data/output/IndexPrescStartDate.csv")

```

# Step 2: Required Exclusions

Members who did not have an encounter with a diagnosis of major depression during the 121-day period from 60 days prior to the IPSD, through the IPSD and the 60 days after the IPSD. 

```{r}
# Major Depressive Disorder Diagnosis Codes

MDD_DiagnosisCodes <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Major Depression")
  
# Extract the associated code values as a vector
MDD_DiagnosisCodesList <- MDD_DiagnosisCodes$Code

```


```{r}

# Isolate only claims with an MDD Dx

# Filter the All HCA claims for Alliance members only
AllianceEnrolledMembersList <- AllianceEnrolledMembers$PrimaryId

Claims_AllAlliance <-
  Claims_AllHCA |> 
  filter(PrimaryID %in% AllianceEnrolledMembersList)

# Select variables for analysis
MDDTest <-
  Claims_AllAlliance |> 
  select(
    ClaimLine,
    PrimaryID,
    BegDate,
    Svccode,
    MedicationNDC,
    Placesvc,
    PrimaryDiagnosis,
    Dx1, Dx2, DX3, Dx4, Dx5, DX6, Dx7, Dx8, DX9, Dx10, Dx11, DX12,
    AdmitDate,
    DischargeDate
    )

# Search for primary diagnosis of MDDDx
MDDTest <- 
  MDDTest |> 
  mutate(MDDxTest_PrimaryDiagnosis = if_else(PrimaryDiagnosis %in% MDD_DiagnosisCodesList, 1, 0))

# Search for subsequent diagnosis of MDDDx

# Convert the dataframe to a data.table
MDDTest <- as.data.table(MDDTest)

# Iterate through the diagnosis columns and create new columns
for (col in grep("^Dx", names(MDDTest), value = TRUE)) {
  MDDTest[, paste0("MDDDxTest_", col) := as.integer(.SD[[col]] %in% MDD_DiagnosisCodesList)]
  MDDTest[, paste0("MDDDx_", col) := fifelse(.SD[[col]] %in% MDD_DiagnosisCodesList, .SD[[col]], NA_character_)]
}

# Create a new column MDDxTestPrimaryDx
MDDTest <-
  MDDTest |> 
  mutate(MDDxTestPrimaryDx = if_else(MDDxTest_PrimaryDiagnosis > 0, 1, 0))

# Create a new column MDDxTestDxAll
MDDTest[, MDDxTestDxAll := as.integer(rowSums(.SD) > 0), .SDcols = patterns("^MDDDxTest_")]

MDDTest <-
  MDDTest |> 
  mutate(MDDxTest_Final = if_else(MDDxTestPrimaryDx > 0 | MDDxTestDxAll > 0, 1, 0))

MDDTest_Final <-
  MDDTest |> 
  select(
    ClaimLine,
    PrimaryID,
    BegDate,
    Svccode,
    MedicationNDC,
    Placesvc,
    AdmitDate,
    DischargeDate,
    MDDxTest_Final
  ) |> 
  filter(MDDxTest_Final > 0)



## Write CSV
# write.csv(MDDTest_Final, "./data/output/MDDxTest.csv")
```

```{r}

# Set the allowed time difference in days
allowed_time_difference <- 60

# Convert IPSD and BegDate to Date type
Step1_IPSD <- Step1_IPSD %>%
  mutate(IPSD = as.Date(IPSD))
MDDTest_Final <- MDDTest_Final %>%
  mutate(BegDate = as.Date(BegDate))

# Perform the comparison and calculations using dplyr
MDDTest_Result <- Step1_IPSD %>%
  inner_join(MDDTest_Final, by = "PrimaryID") %>%
  mutate(TimeDiff = as.numeric(BegDate - IPSD))

MDDTest_Result <- MDDTest_Result |> 
  mutate(MDDxTest_PrePost = if_else(TimeDiff > -60 & TimeDiff < 60, 1, 0)) |> 
  rename("MDDDate" = BegDate)

MDDTest_ResultFinal <- MDDTest_Result |> 
  filter(MDDxTest_PrePost > 0) |> 
  select(
    PrimaryID,
    IPSD,
    MDDDate,
    PrimaryID,
    Svccode,
    Placesvc,
    AdmitDate,
    DischargeDate
  )

## Write to CSV
# write.csv(MDDTest_ResultFinal, "./data/output/MDDxTest_FinalResult.csv")

```



Members who meet any of the following criteria remain in the eligible population:

Step 2a:

An acute or nonacute inpatient stay with any diagnosis of major depression (Major Depression Value Set) on the discharge claim. To identify acute and nonacute inpatient stays:

  1.    Identify all acute and nonacute inpatient stays (Inpatient Stay Value Set).
  2.    Identify the admission and discharge dates for the stay. Either an admission or discharge during the required time frame meets criteria.
  
```{r}
# Extract the inpatient value set

InpatientValueSetCodes <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Inpatient Stay")
  
# Extract the associated code values as a vector
InpatientValueSetCodesList <- InpatientValueSetCodes$Code

```

```{r}

MDDTest_ResultFinal_2a <-
  MDDTest_ResultFinal |> 
  filter(Svccode %in% InpatientValueSetCodesList)

```
















