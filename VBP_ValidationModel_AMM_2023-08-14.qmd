---
title: "Validation Model, NCQA My HEDIS 2023"
subtitle: "Antidepressant Medication Management"
author: 
  name: "John Ryan Kivela, MA and Victoria Tewa, LPC"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

# Set Up

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(kableExtra)
library(gt)
library(scales)
library(utils)
library(lubridate)
library(RODBC)
library(DBI)
library(odbc)
library(dbplyr)
library(data.table)

# Create table for inline code
InLineCode <- data.frame(
  ReportDate = "04-27-2023",
  MeasurementYear = "01-01-2023 to 12-31-2023",
  ClaimsAdjudicatedThrough = "02-28-2023",
  HEDISVersion = "My 2023",
  IntakePeriod = "05-01-2022 to 04-30-2023",
  NegativeMedicationHistory = "01-16-222 to 01-15-2023",
    IPSDstart_date = as.Date("2022-05-01"),
    IPSDend_date = as.Date("2023-04-30"),
    NMHstart_date = as.Date("2022-01-16"),
    NMHend_date = as.Date("2023-01-15")
)

# Define custom inline code hook for comma separators
comma_separator_hook <- function(x) {
  formatted <- format(x, big.mark = ",")
  knitr::asis_output(formatted)
}

# Set the inline code hook globally
knitr::knit_hooks$set(inline = comma_separator_hook)

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))
```

# Pre-Load Data

```{r}
#| label: Pre-Load Data
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false


# Enrollments
GM_Enrollments_AllACC <- read.csv("./data/input/Enrollments_AllACC.csv")
GM_ALLAZ_Enrollments <- read.csv("./data/input/GM_AllAZ_Enrollments.csv")
GM_ALLAZ_Addresses <- read.csv("./data/input/GM_AllAZ_Addresses.csv")
GM_PrimaryAssignedClinic <- read.csv("./data/input/GM_PrimaryAssignedClinic.csv")
GM_HealthHomes <- read.csv("./data/input/GM_HealthHomes.csv")

# Demographics
Clients_Demographics_AllACC <- read.csv("./data/input/Clients.csv")
GM_DUGLess <- read.csv("./data/input/DUGLess.csv")

# Claims
Claims_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")
Claims_PBM_AllHCA <- read.csv("./data/input/Claims_PBM_AllHCA.csv")

# Value Sets
MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", sheet = "Value Sets to Codes")

MyHEDIS2023_MedicationDirectory <- read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", sheet = "Medication Lists to Codes")

# Summary
AllTheVariables <- read.csv("./data/input/AllTheVariables.csv")

```

# Step 1: Index Prescription Start Date

Determine the IPSDate. Identify the date of the earliest dispensing event for an antidepressant medication (Antidepressant Medications List) during the intake period.

## Determine Alliance Enrollment

```{r}
#| label: Enrollment
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false


# Identify Alliance Membership

#Merge Enrollment files

AllianceEnrolledMembers_Merge <-
  merge(x = GM_Enrollments_AllACC,
        y = Clients_Demographics_AllACC,
        by = "PrimaryId",
        all.x = TRUE)
  
AllianceEnrolledMembers_Merge <-  
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate,
    DisenrollmentDate,
    DOB,
    DOD
  )

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Enrollments,
        by = "PrimaryId",
        all.x = TRUE)

AllianceEnrolledMembers_Merge <-
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate.x,
    DisenrollmentDate.x,
    DOB,
    DOD,
    BHHShortName
  )

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Addresses,
        by = "PrimaryId",
        all.x = TRUE)

AllianceEnrolledMembers_Merge <- 
  AllianceEnrolledMembers_Merge |> 
  select(
    PrimaryId,
    EnrollmentDate.x,
    DisenrollmentDate.x,
    DOB,
    DOD,
    BHHShortName,
    ResCountyName
  )

# Trim extra spaces at end of rescountyname

AllianceEnrolledMembers_Merge$ResCountyName <-
  trimws(AllianceEnrolledMembers_Merge$ResCountyName)

# Filter for The Alliance Providers and the Northern Counties

AllianceEnrolledMembers <-
  AllianceEnrolledMembers_Merge |> 
  filter(BHHShortName %in% Provider_ShortName)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(ResCountyName %in% NAZ_Counties)

# Filter out dead people (no offense intended)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(is.na(DOD))

## Write to CSV
# write.csv(AllianceEnrolledMembers, "./data/output/AllianceEnrolledMembers.csv")

```

## Isolate Antidepressant medication list

```{r}
#| label: Antidepressant medication list
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Antidepressant Medication List

# Filter the MyHEDIS2023_MedicationDirectory for "Antidepressant Medications"
AntidepressantMedications <- MyHEDIS2023_MedicationDirectory |> 
  filter(`Medication List Name` == "Antidepressant Medications")

# Extract the associated code values as a vector
AntidepressantMedicationList <- AntidepressantMedications$Code
```

## Select eligible medication claims for eligible Aliiance members

```{r}
#| label: Eligibel Claims
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Index Prescription Start Date

# Filter the Claims for only antidepressant medications
IPSD <-
  Claims_AllHCA |> 
  filter(MedicationNDC %in% AntidepressantMedicationList)

# Filter IPSD for the intake period 5/1/22 - 4/30/23

# Specify the start and end dates
IPSD_start_date <- as.Date("2022-05-01")
IPSD_end_date <- as.Date("2023-04-30")

IPSD <- 
  IPSD |> 
  filter(BegDate >= IPSD_start_date, 
         BegDate <= IPSD_end_date)

Step1_IPSD <-
  IPSD |> 
  filter(PrimaryID %in% AllianceEnrolledMembers$PrimaryId) |> 
  select(
    PrimaryID,
    Icnno,
    BegDate
  ) |> 
  rename("IPSDate" = BegDate) 

# Function to generate non-repeating random number with 10 digits
generate_unique_random <- function(n, existing_numbers) {
  repeat {
    random_digits <- sample(0:9)
    random_number <- as.numeric(paste(random_digits, collapse = ""))
    
    # Check if the generated number is unique
    if (!(random_number %in% existing_numbers)) {
      return(random_number)
    }
  }
}

# Create a new column 'IPSD_ID' with non-repeating random numbers
existing_numbers <- Step1_IPSD$IPSD_ID
Step1_IPSD$IPSD_ID <- sapply(1:nrow(Step1_IPSD), generate_unique_random, existing_numbers)


## Write to CSV
# write.csv(IPSD, "./data/output/IndexPrescStartDate.csv")

```

# Step 2: Required Exclusions

Exclusion: Members who did not have an encounter with a diagnosis of major depression during the 121-day period from 60 days prior to the IPSDate, through the IPSDate and the 60 days after the IPSDate. 

```{r}
#| label: Step 2 Required Exclusions
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false


# Major Depressive Disorder Diagnosis Codes

MDD_DiagnosisCodes <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Major Depression")
  
# Extract the associated code values as a vector
MDD_DiagnosisCodesList <- MDD_DiagnosisCodes$Code

```


```{r}
#| label: Step2 Required Exclusions 2
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Isolate only claims with an MDD Dx

# Filter the All HCA claims for Alliance members only
AllianceEnrolledMembersList <- AllianceEnrolledMembers$PrimaryId

Claims_AllAlliance <-
  Claims_AllHCA |> 
  filter(PrimaryID %in% AllianceEnrolledMembersList)

# Select variables for analysis
MDDTest <-
  Claims_AllAlliance |> 
  select(
    PrimaryID,
    BegDate,
    Icnno,
    Svccode,
    MedicationNDC,
    Placesvc,
    PrimaryDiagnosis,
    Dx1, Dx2, DX3, Dx4, Dx5, DX6, Dx7, Dx8, DX9, Dx10, Dx11, DX12,
    AdmitDate,
    DischargeDate
    )

# Search for primary diagnosis of MDDDx
MDDTest <- 
  MDDTest |> 
  mutate(MDDxTest_PrimaryDiagnosis = if_else(PrimaryDiagnosis %in% MDD_DiagnosisCodesList, 1, 0))

# Search for subsequent diagnosis of MDDDx

# Convert the dataframe to a data.table
MDDTest <- as.data.table(MDDTest)

# Iterate through the diagnosis columns and create new columns
for (col in grep("^Dx", names(MDDTest), value = TRUE)) {
  MDDTest[, paste0("MDDDxTest_", col) := as.integer(.SD[[col]] %in% MDD_DiagnosisCodesList)]
  MDDTest[, paste0("MDDDx_", col) := fifelse(.SD[[col]] %in% MDD_DiagnosisCodesList, .SD[[col]], NA_character_)]
}

# Create a new column MDDxTestPrimaryDx
MDDTest <-
  MDDTest |> 
  mutate(MDDxTestPrimaryDx = if_else(MDDxTest_PrimaryDiagnosis > 0, 1, 0))

# Create a new column MDDxTestDxAll
MDDTest[, MDDxTestDxAll := as.integer(rowSums(.SD) > 0), .SDcols = patterns("^MDDDxTest_")]

MDDTest <-
  MDDTest |> 
  mutate(MDDxTest_Final = if_else(MDDxTestPrimaryDx > 0 | MDDxTestDxAll > 0, 1, 0))

# Function to generate non-repeating random number with 10 digits
generate_unique_random <- function(n, existing_numbers) {
  repeat {
    random_digits <- sample(0:9)
    random_number <- as.numeric(paste(random_digits, collapse = ""))
    
    # Check if the generated number is unique
    if (!(random_number %in% existing_numbers)) {
      return(random_number)
    }
  }
}

# Create a new column 'MDD_ID' with non-repeating random numbers
existing_numbers <- MDDTest$MDD_ID
MDDTest$MDD_ID <- sapply(1:nrow(MDDTest), generate_unique_random, existing_numbers)

MDDTest_Final <-
  MDDTest |> 
  select(
    PrimaryID,
    Icnno,
    BegDate,
    MDD_ID,
    AdmitDate,
    DischargeDate,
    Svccode,
    MedicationNDC,
    Placesvc,
    MDDxTest_Final
  ) |> 
  filter(MDDxTest_Final > 0)

```

```{r}
#| label: IPSD
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Convert IPSDate and BegDate to Date type
Step1_IPSD <- Step1_IPSD |>
  mutate(IPSDate = as.Date(IPSDate))
MDDTest_Final <- MDDTest_Final |>
  mutate(BegDate = as.Date(BegDate))

# Perform the comparison and calculations using dplyr
MDDTest_Result <- Step1_IPSD |>
  inner_join(MDDTest_Final, by = "PrimaryID") |>
  mutate(TimeDiff = as.numeric(BegDate - IPSDate))

MDDTest_Result <- MDDTest_Result |> 
  mutate(MDDxTest_PrePost = if_else(TimeDiff > -60 & TimeDiff < 60, 1, 0)) |> 
  rename("MDDDate" = BegDate)

MDDTest_ResultFinal <- MDDTest_Result |> 
  filter(MDDxTest_PrePost > 0) |> 
  select(
    PrimaryID,
    Icnno.x,
    IPSDate,
    IPSD_ID,
    MDDDate,
    MDD_ID,
    AdmitDate,
    DischargeDate,
    Svccode,
    Placesvc
  )

```



Members who meet any of the following criteria remain in the eligible population:

## Step 2a: Inpatient Stay

An acute or nonacute inpatient stay with any diagnosis of major depression (Major Depression Value Set) on the discharge claim. To identify acute and nonacute inpatient stays:

  1.    Identify all acute and nonacute inpatient stays (Inpatient Stay Value Set).
  2.    Identify the admission and discharge dates for the stay. Either an admission or discharge during the required time frame meets criteria.
  
```{r}
#| label: Value Set 1
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false


# Extract the inpatient value set

InpatientValueSetCodes <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Inpatient Stay")
  
# Extract the associated code values as a vector
InpatientValueSetCodesList <- InpatientValueSetCodes$Code

```

```{r}
#| label: MDD Test
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Determine if there is a valid "inpatient stay" code
MDDTest_2a <-
  MDDTest_ResultFinal |> 
  mutate(MDDTest_2a = if_else(Svccode %in% InpatientValueSetCodesList, 1, 0))

# Convert MDDDate, AdmitDate and Discharge date to Date type
MDDTest_2a <- 
  MDDTest_2a |>
  mutate(MDDDate = as.Date(MDDDate))
MDDTest_2a <- 
  MDDTest_2a |>
  mutate(IPSDate = as.Date(IPSDate))
MDDTest_2a <-
  MDDTest_2a |>
  mutate(AdmitDate = as.Date(AdmitDate))
MDDTest_2a <- 
  MDDTest_2a |>
  mutate(DischargeDate = as.Date(DischargeDate))

# Perform calculations of time difference
MDDTest_2a <- 
  MDDTest_2a |>
  mutate(Admit_TimeDiff = as.numeric(IPSDate - AdmitDate))

MDDTest_2a <- 
  MDDTest_2a |>
  mutate(Discharge_TimeDiff = as.numeric(IPSDate - DischargeDate))

# Test for admit and/or discharge date that is less than 60 days from the date of the IPSDate
MDDTest_2a <- 
  MDDTest_2a |> 
  mutate(MDDTest_AdmitDate = if_else(Admit_TimeDiff > -60 & Admit_TimeDiff < 60, 1, 0))

MDDTest_2a <- 
  MDDTest_2a |> 
  mutate(MDDTest_DischargeDate = if_else(Discharge_TimeDiff > -60 & Discharge_TimeDiff < 60, 1, 0))

# Calculate the MDDTest_2aResult column
MDDTest_2a$MDDTest_2aResult <- 
  ifelse(MDDTest_2a$MDDTest_2a > 0 &
    (MDDTest_2a$MDDTest_AdmitDate > 0 | MDDTest_2a$MDDTest_DischargeDate < 0), 1, 0
  )
  
# Select variables for analysis
MDDTest_ResultFinal_2a <-
  MDDTest_2a |> 
  select(
    PrimaryID,
    Icnno.x,
    IPSDate,
    IPSD_ID,
    MDDDate,
    MDD_ID,
    AdmitDate,
    DischargeDate,
    Svccode,
    Placesvc,
    MDDTest_2aResult
  )
```

## Step 2b: Acute Inpatient

An acute inpatient encounter with any diagnosis of major depression: Acute Inpatient Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2b
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the inpatient value set

ValueSetCodes_AcuteInpatient <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Acute Inpatient")
  
# Extract the associated code values as a vector
ValueSetCodesList_AcuteInpatient <- ValueSetCodes_AcuteInpatient$Code

```

```{r}
#| label: Step 2b Acute Inpatient
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2b <-
  MDDTest_ResultFinal_2a |> 
  mutate(MDDTest_2bResult = if_else(Svccode %in% ValueSetCodesList_AcuteInpatient, 1, 0))

```

## Step 2c: Non-Acute Inpatient

A nonacute inpatient encounter with any diagnosis of major depression: Nonacute Inpatient Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2c
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the inpatient value set

ValueSetCodes_NonAcuteInpatient <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Nonacute Inpatient")
  
# Extract the associated code values as a vector
ValueSetCodesList_NonAcuteInpatient <- ValueSetCodes_NonAcuteInpatient$Code

```

```{r}
#| label: Step 2c
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2c <-
  MDDTest_ResultFinal_2b |> 
  mutate(MDDTest_2cResult = if_else(Svccode %in% ValueSetCodesList_NonAcuteInpatient, 1, 0))

```

## Step 2d: Outpatient

An outpatient visit with any diagnosis of major depression: Visit Setting Unspecified Value Set with Outpatient POS Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2d
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_VisitSettingUnpsecified <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Visit Setting Unspecified")
  
# Extract the associated code values as a vector
ValueSetCodesList_VisitSettingUnspecified <- ValueSetCodes_VisitSettingUnpsecified$Code

# Extract the value set

ValueSetCodes_OutpatientPOS <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Outpatient POS")
  
# Extract the associated code values as a vector
ValueSetCodesList_OutpatientPOS <- ValueSetCodes_OutpatientPOS$Code

```

```{r}
#| label: Step 2d Outpatient
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2d <-
  MDDTest_ResultFinal_2c |> 
  mutate(MDDTest_2dResult = if_else(Svccode %in% ValueSetCodesList_VisitSettingUnspecified &
                                      Placesvc %in% ValueSetCodesList_OutpatientPOS, 1, 0))

```

## Step 2e: BH Outpatient

An outpatient visit with any diagnosis of major depression: BH Outpatient Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2e
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the inpatient value set

ValueSetCodes_BHOutpatient <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "BH Outpatient")
  
# Extract the associated code values as a vector
ValueSetCodesList_BHOutpatient <- ValueSetCodes_BHOutpatient$Code

```

```{r}
#| label: Step 2e: BH Outpatient
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2e <-
  MDDTest_ResultFinal_2d |> 
  mutate(MDDTest_2eResult = if_else(Svccode %in% ValueSetCodesList_BHOutpatient, 1, 0))

```

## Step 2f: Intensive Outpatient POS

An intensive outpatient encounter or partial hospitalization with any diagnosis of major depression: Visit Setting Unspecified Value Set with Partial Hospitalization POS Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2f
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the inpatient value set

ValueSetCodes_PartialHospitalizationPOS <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Partial Hospitalization POS")
  
# Extract the associated code values as a vector
ValueSetCodesList_PartialHospitalizationPOS <- ValueSetCodes_PartialHospitalizationPOS$Code

```

```{r}
#| label: Step 2f: IOP POS
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2f <-
  MDDTest_ResultFinal_2e |> 
  mutate(MDDTest_2fResult = if_else(Svccode %in% ValueSetCodes_VisitSettingUnpsecified &
                                      Placesvc %in% ValueSetCodes_PartialHospitalizationPOS, 1, 0))

```

## Step 2g: IOP or Partial Hospitalization

An intensive outpatient encounter or partial hospitalization with any diagnosis of major depression: Partial Hospitalization or Intensive Outpatient Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2g
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_PartialHospitalizationOrIntensiveOutpatient <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Partial Hospitalization or Intensive Outpatient")
  
# Extract the associated code values as a vector
ValueSetCodesList_PartialHospitalizationOrIntensiveOutpatient <- ValueSetCodes_PartialHospitalizationOrIntensiveOutpatient$Code

```

```{r}
#| label: Step 2g IOP
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2g <-
  MDDTest_ResultFinal_2f |> 
  mutate(MDDTest_2gResult = if_else(Svccode %in% ValueSetCodes_PartialHospitalizationOrIntensiveOutpatient, 1, 0))

```

## Step 2h: Community Mental Health Center

A community mental health center visit with any diagnosis of major depression: Visit Setting Unspecified Value Set with Community Mental Health Center POS Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2h
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_CommunityMentalHealthCenterPOS <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Community Mental Health Center POS")
  
# Extract the associated code values as a vector
ValueSetCodesList_CommunityMentalHealthCenterPOS <- ValueSetCodes_CommunityMentalHealthCenterPOS$Code

```

```{r}
#| label: Step 2h: CMHS
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2h <-
  MDDTest_ResultFinal_2g |> 
  mutate(MDDTest_2hResult = if_else(Svccode %in% ValueSetCodes_VisitSettingUnpsecified &
                                      Placesvc %in% ValueSetCodes_CommunityMentalHealthCenterPOS, 1, 0))

```

## Step 2i: Electroconvulsive Therapy

Electroconvulsive therapy with any diagnosis of major depression: Electroconvulsive Therapy Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2i
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_ElectroconvulsiveTherapy <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Electroconvulsive Therapy")
  
# Extract the associated code values as a vector
ValueSetCodesList_ElectroconvulsiveTherapy <- ValueSetCodes_ElectroconvulsiveTherapy$Code

```

```{r}
#| label: Step 2i: ECT
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2i <-
  MDDTest_ResultFinal_2h |> 
  mutate(MDDTest_2iResult = if_else(Svccode %in% ValueSetCodes_ElectroconvulsiveTherapy, 1, 0))

```

## Step 2j: Transcranial Magnetic Stimulation

A transcranial magnetic stimulation visit with any diagnosis of major depression: Transcranial Magnetic Stimulation Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2j
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_TranscranialMagneticStimulation <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Transcranial Magnetic Stimulation")
  
# Extract the associated code values as a vector
ValueSetCodesList_TranscranialMagneticStimulation <- ValueSetCodes_TranscranialMagneticStimulation$Code

```

```{r}
#| label: Step 2j: TMS
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2j <-
  MDDTest_ResultFinal_2i |> 
  mutate(MDDTest_2jResult = if_else(Svccode %in% ValueSetCodes_TranscranialMagneticStimulation, 1, 0))

```

## Step 2k: Visit Setting Unspecified, Telehealth Place of Service

A telehealth visit with any diagnosis of major depression: Visit Setting Unspecified Value Set with Telehealth POS Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2k
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_TelehealthPOS <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Telehealth POS")
  
# Extract the associated code values as a vector
ValueSetCodesList_TelehealthPOS <- ValueSetCodes_TelehealthPOS$Code

```

```{r}
#| label: Step 2k: Telehealth POS
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2k <-
  MDDTest_ResultFinal_2j |> 
  mutate(MDDTest_2kResult = if_else(Svccode %in% ValueSetCodes_VisitSettingUnpsecified &
                                      Placesvc %in% ValueSetCodes_TelehealthPOS, 1, 0))

```

## Step 2l: Observation

An observation visit (Observation Value Set) with any diagnosis of major depression (Major Depression Value Set).

```{r}
#| label: Value set 2l
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_Observation <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Observation")
  
# Extract the associated code values as a vector
ValueSetCodesList_Observation <- ValueSetCodes_Observation$Code

```

```{r}
#| label: Step 2l: Observation
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2l <-
  MDDTest_ResultFinal_2k |> 
  mutate(MDDTest_2lResult = if_else(Svccode %in% ValueSetCodes_Observation, 1, 0))

```

## Step 2m: Emergency Department

An ED visit (ED Value Set) with any diagnosis of major depression (Major Depression Value Set).

```{r}
#| label: Value set 2m
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_ED <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "ED")
  
# Extract the associated code values as a vector
ValueSetCodesList_ED <- ValueSetCodes_ED$Code

```

```{r}
#| label: Step 2m: ED
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2m <-
  MDDTest_ResultFinal_2l |> 
  mutate(MDDTest_2mResult = if_else(Svccode %in% ValueSetCodes_ED, 1, 0))

```

## Step 2n: Emergency Department Place of Service

An ED visit with any diagnosis of major depression: Visit Setting Unspecified Value Set with ED POS Value Set with Major Depression Value Set.

```{r}
#| label: Value set 2n
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_EDPOS <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "ED POS")
  
# Extract the associated code values as a vector
ValueSetCodesList_EDPOS <- ValueSetCodes_EDPOS$Code

```

```{r}
#| label: Step 2n: ED POS
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2n <-
  MDDTest_ResultFinal_2m |> 
  mutate(MDDTest_2nResult = if_else(Svccode %in% ValueSetCodes_VisitSettingUnpsecified &
                                      Placesvc %in% ValueSetCodes_EDPOS, 1, 0))

```

## Step 2o: Telephone Visits

A telephone visit (Telephone Visits Value Set) with any diagnosis of major depression (Major Depression Value Set).

```{r}
#| label: Value set 2o
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_TelephoneVisits <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Telephone Visits")
  
# Extract the associated code values as a vector
ValueSetCodesList_TelephoneVisits <- ValueSetCodes_TelephoneVisits$Code

```

```{r}
#| label: Step 2o: Telephone visits
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2o <-
  MDDTest_ResultFinal_2n |> 
  mutate(MDDTest_2oResult = if_else(Svccode %in% ValueSetCodes_TelephoneVisits, 1, 0))

```

## Step 2p: Online Assessment

An e-visit or virtual check-in (Online Assessments Value Set) with any diagnosis of major depression (Major Depression Value Set).

```{r}
#| label: Value set 2p
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_OnlineAssessments <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Online Assessments")
  
# Extract the associated code values as a vector
ValueSetCodesList_OnlineAssessments <- ValueSetCodes_OnlineAssessments$Code

```

```{r}
#| label: Step 2p: Online Assessment
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

MDDTest_ResultFinal_2p <-
  MDDTest_ResultFinal_2o |> 
  mutate(MDDTest_2pResult = if_else(Svccode %in% ValueSetCodes_OnlineAssessments, 1, 0))

```

## Step 2q: Hospice

Exclusion: Members in hospice or using hospice services any time during the measurement year. Refer to General Guideline 15: Members in Hospice.

There are no members with hospice services

```{r}
#| label: Value set 2q
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Extract the value set

ValueSetCodes_HospiceEncounter <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Hospice Encounter")
  
# Extract the associated code values as a vector
ValueSetCodesList_HospiceEncounter <- ValueSetCodes_HospiceEncounter$Code

# Extract the value set

ValueSetCodes_HospiceIntervention <- 
MyHEDIS2023_AllValueSetsToCodes |> 
  filter(`Value Set Name` == "Hospice Intervention")
  
# Extract the associated code values as a vector
ValueSetCodesList_HospiceIntervention <- ValueSetCodes_HospiceIntervention$Code

```

```{r}
#| label: Step 2q: Hospice
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

#From the original Claims_AllAlliance

# Create of list of people with hospice services
HospiceServices <-
  Claims_AllAlliance |> 
  filter(Svccode %in% ValueSetCodesList_HospiceEncounter |
           Svccode %in% ValueSetCodesList_HospiceIntervention)

# Extract list of PrimaryIds with hospice services

HospiceServicesList <- HospiceServices$PrimaryID

# There are no members with hospice services

```

## Step 2r: Death

Members who died any time during the measurement year. Refer to General Guideline 16: Deceased Members.

All deceased members were already excluded from the member enrollment roster created before

## Step 2: Wrapping up

The MDDTest results are scanned and all cases meeting at least 1 criteria, who did not receive hospice, and who are not deceased, are selected for further evaluation.

```{r}
#| label: Step 2 Wrap Up
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false
# Scan all test results and sum up findings
# Assuming your data frame is named 'df'

MDDTest_columns_to_scan <- c(
  "MDDTest_2aResult", "MDDTest_2bResult", "MDDTest_2cResult", "MDDTest_2dResult",
  "MDDTest_2eResult", "MDDTest_2fResult", "MDDTest_2gResult", "MDDTest_2hResult",
  "MDDTest_2iResult", "MDDTest_2jResult", "MDDTest_2kResult", "MDDTest_2lResult",
  "MDDTest_2mResult", "MDDTest_2nResult", "MDDTest_2oResult", "MDDTest_2pResult"
)

MDDTest_ResultFinal_2p$MDDTestResultSum <- rowSums(MDDTest_ResultFinal_2p[MDDTest_columns_to_scan], na.rm = TRUE)

Step2_MDD <-
  MDDTest_ResultFinal_2p |> 
  filter(MDDTestResultSum > 0) |> 
  select(
    PrimaryID,
    Icnno.x,
    IPSDate,
    IPSD_ID,
    MDDDate,
    MDD_ID,
    AdmitDate,
    DischargeDate,
    Svccode,
    Placesvc
  )

## Write to CSV
# write.csv(Step2_MDD, "./data/output/MajorDepressiveDisorderDiagnoses.csv")

```

# Step 3: Negative Medication History

```{r}
#| label: Negative Medication History
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false



```
